import axios from "axios";
import Head from "next/head";
import Link from "next/link";
import { GetServerSideProps } from "next";
import { unstable_getServerSession } from "next-auth";
import { authOptions } from "../../api/auth/[...nextauth]";
import { prisma } from "../../../db";
import { useState } from "react";
import { useForm } from "react-hook-form";

//COMPONENTS
import Nav from "../../../src/components/Nav/Nav";
import AdminLayout from "../../../src/components/admin/AdminLayout/AdminLayout";
import ButtonOnClick from "../../../src/components/UI/ButtonOnClick/ButtonOnClick";
import Modal from "../../../src/components/Modal/Modal";
import Button from "../../../src/components/UI/Button/Button";
import Table from "../../../src/components/Ranking/Table/Table";
import Pagination from "../../../src/components/UI/Pagination/Pagination";

import PlusIcon from "../../../src/icons/PlusIcon";

import { fetchUsers } from "../../../src/utils/fetching";

import { User } from "../../../src/types/model";

import s from "./UsersPage.module.scss";

type Props = {
  membershipId: string;
  users: User[];
  usersCount: number;
};

type UserForm = {
  fullName: string;
};

const trUsersTitle = ["", "Nombre", "ID"];

export default function PromotionPage({
  membershipId,
  users,
  usersCount,
}: Props) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<UserForm>();

  const [openCreateModal, setOpenCreateModal] = useState(false);
  const [usersList, setUsersList] = useState<User[]>(users);
  const [skip, setSkip] = useState(0);

  const getNextPage = async (skip: number) => {
    const users = await fetchUsers(skip);
    setUsersList(users);
  };

  const onSubmit = async (data: UserForm) => {
    const body = {
      ...data,
      membershipId,
    };

    const postUser = await axios.post("http://localhost:3000/api/user", body);

    if (postUser.data.message) {
      setOpenCreateModal(false);
      reset();
      const users = await fetchUsers(skip);
      setUsersList(users);
    }
  };

  return (
    <div className={s.container}>
      <Head>
        <title>JOBS | Usuarios</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {openCreateModal && (
        <Modal
          isOpen={openCreateModal}
          handleCloseModal={() => setOpenCreateModal(false)}
        >
          <form onSubmit={handleSubmit(onSubmit)} className={s.form}>
            <div>
              <label htmlFor="fullName">Nombre y Apellido:</label>
              <input
                type="text"
                {...register("fullName")}
                required
                id="fullName"
              />
            </div>

            <Button type="primary" operation="submit">
              CREAR
            </Button>
          </form>
        </Modal>
      )}

      <Nav route="admin" />

      <main className={s.main}>
        <AdminLayout route="users">
          <div className={s.btn_wrapper}>
            <ButtonOnClick
              type="primary"
              handleClick={() => setOpenCreateModal(true)}
            >
              <p>AÃ‘ADIR USUARIO</p>
              <div>
                <PlusIcon size={22} />
              </div>
            </ButtonOnClick>
          </div>

          <div className={s.table_wrapper}>
            <Table trTitles={trUsersTitle}>
              {usersList?.map((user, i) => (
                <tr key={user.id} className={s.row}>
                  <td>{i + 1}</td>
                  <td>
                    <Link href={`/user/${user.id}`}>{user.fullName}</Link>
                  </td>
                  <td>{user.id}</td>
                </tr>
              ))}
            </Table>
          </div>
          <div className={s.pagination_wrapper}>
            <Pagination
              skip={skip}
              setSkip={setSkip}
              total={usersCount}
              getNextPage={getNextPage}
            />
          </div>
        </AdminLayout>
      </main>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );

  if (session?.user.role === "ADMIN") {
    const memberships = await prisma.membership.findMany({
      orderBy: { minPoints: "asc" },
    });

    const users = await prisma.user.findMany({
      skip: 0,
      take: 20,
    });

    const usersCount = await prisma.user.count();

    return {
      props: {
        session,
        membershipId: memberships[0]?.id,
        users: JSON.parse(JSON.stringify(users)),
        usersCount,
      },
    };
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};
