// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  EMPLOYEE
  ADMIN
}

model User {
  id                      String                @default(cuid()) @id
  role                    Role                  @default(USER)
  fullName                String?
  membership              Membership?           @relation(fields: [membershipId], references: [id])
  membershipId            String
  consumptions            ConsumptionOnUser[]
  promotions              PromotionOnUser[]
  loggedInfo              UserLoggedInfo?
  totalPoints             Int                   @default(0)
  totalPointsSpent        Int                   @default(0)
  createdAt               DateTime              @default(now()) @map(name: "created_at")
  updatedAt               DateTime              @updatedAt @map(name: "updated_at")
}

model UserLoggedInfo {
  email                   String                @unique
  name                    String
  user                    User                  @relation(fields: [userId], references: [id])
  userId                  String                @unique
}

model Membership {
  id                      String                @default(cuid()) @id
  name                    String
  minPoints               Int
  maxPoints               Int?
  users                   User[]
  promotions              Promotion[]
}

enum ConsumptionType {
  DRINK
  GAME
  FOOD
}

model Consumption {
  id                      String                      @default(cuid()) @id
  name                    String
  type                    ConsumptionType
  points                  Int
  users                   ConsumptionOnUser[]
  promotions              ConsumptionOnPromotion[]
}

model ConsumptionOnUser {
  id                      String            @default(cuid()) @id
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  consumption             Consumption       @relation(fields: [consumptionId], references: [id], onDelete: Cascade)
  consumptionId           String
  winner                  Boolean?
  quantity                Int
  createdAt               DateTime          @default(now()) @map(name: "created_at")
}

model Promotion {
  id                      String                     @default(cuid()) @id
  name                    String 
  points                  Int
  discount                Int  
  active                  Boolean                    @default(true)
  memberships             Membership[]
  users                   PromotionOnUser[]
  consumptions            ConsumptionOnPromotion[]
}

model ConsumptionOnPromotion {
  consumption             Consumption       @relation(fields: [consumptionId], references: [id], onDelete: Cascade)
  consumptionId           String
  promotion               Promotion         @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  promotionId             String
  quantity                Int
  createdAt               DateTime          @default(now()) @map(name: "created_at")

  @@id([consumptionId, promotionId])
}

model PromotionOnUser {
  id                      String            @default(cuid()) @id
  promotion               Promotion         @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  promotionId             String
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  quantity                Int
  createdAt               DateTime          @default(now()) @map(name: "created_at")
}


